"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[130],{426:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>c,contentTitle:()=>t,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Aula 2/Classes","title":"Revis\xe3o 1: Classes","description":"&emsp;Bom dia pessoas, Periquito aqui pra ajudar na sua prova de Phaser! Nessa primeira p\xe1gina vamos lidar com classes e seus constitu\xedntes. Caso j\xe1 esteja confiante com o assunto, tente o exerc\xedcio 1 nessa pasta","source":"@site/docs/Aula 2/Classes.md","sourceDirName":"Aula 2","slug":"/Aula 2/classes","permalink":"/auloes-phaser-2025/Aula 2/classes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Aula 2/Classes.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Revis\xe3o 1: Classes","slug":"classes","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"2.1. Aplica\xe7\xe3o dos conceitos de Phaser em um jogo","permalink":"/auloes-phaser-2025/Aula 1/5"},"next":{"title":"Exerc\xedcio 1","permalink":"/auloes-phaser-2025/Aula 2/ex1"}}');var n=s(4848),r=s(8453);const i={title:"Revis\xe3o 1: Classes",slug:"classes",sidebar_position:1},t="Revis\xe3o 1",c={},d=[{value:"Classes",id:"classes",level:2},{value:"Constructor",id:"constructor",level:2},{value:"M\xe9todos",id:"m\xe9todos",level:2},{value:"Heran\xe7a",id:"heran\xe7a",level:2}];function l(e){const a={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"revis\xe3o-1",children:"Revis\xe3o 1"})}),"\n",(0,n.jsx)(a.p,{children:"\u2003Bom dia pessoas, Periquito aqui pra ajudar na sua prova de Phaser! Nessa primeira p\xe1gina vamos lidar com classes e seus constitu\xedntes. Caso j\xe1 esteja confiante com o assunto, tente o exerc\xedcio 1 nessa pasta"}),"\n",(0,n.jsx)(a.h2,{id:"classes",children:"Classes"}),"\n",(0,n.jsx)(a.p,{children:"\u2003Tendo como padr\xe3o o POO, uma classe \xe9 o equivalente a uma defini\xe7\xe3o de um objeto. Por exemplo, imaginamos a classe gato"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",children:"class Gato{\n\n}\n"})}),"\n",(0,n.jsx)(a.p,{children:"\u2003Hum, isso parece meio vazio, ent\xe3o vamos come\xe7ar pelos atributos desse gato."}),"\n",(0,n.jsx)(a.h2,{id:"constructor",children:"Constructor"}),"\n",(0,n.jsx)(a.p,{children:"\u2003O constructor n\xe3o \xe9 nada mais do que a fun\xe7\xe3o chamada ao criar um objeto. Nele, voc\xea normalmente declara os atributos do seu objeto. Voltando ao exemplo do gatinho:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",children:"class Gato{\n    constructor(){\n        //In\xedcio do objeto aqui!\n    }\n}\n"})}),"\n",(0,n.jsx)(a.p,{children:"\u2003Vamos declarar alguns atributos para essa classe. Para isso, podemos inserir que atributos passaremos na cria\xe7\xe3o do objeto em (). Imagine que queremos criar o gato com atributos nome, idade e n\xfamero de patas. Vamos imaginar que, nesse caso, um gato s\xf3 possa ter 4 patas, e por isso n\xe3o precisamos passar esse valor. Podemos fazer assim ent\xe3o:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",children:"class Gato{\n    constructor(nome, idade){\n        this.nome = nome;\n        this.idade = idade;\n        this.patas = 4;\n    }\n}\n"})}),"\n",(0,n.jsx)(a.p,{children:"\u2003Se voc\xea rodar esse c\xf3digo, ver\xe1 que... Bem, nada acontece. Isso acontece porque voc\xea est\xe1 criando a IDEIA de um gato, n\xe3o o gato em s\xed. Vamos instanciar o gato e tentar ver alguma caracter\xedstica dele, como o nome. Para isso, n\xf3s podemos criar um novo gato em uma vari\xe1vel dessa forma:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",children:'class Gato{\n    constructor(nome, idade){\n        this.nome = nome;\n        this.idade = idade;\n        this.patas = 4;\n    }\n}\nlet meuGato = new Gato("Nome Legal", 3);\nconsole.log(meuGato.nome)\n'})}),"\n",(0,n.jsx)(a.p,{children:'\u2003Dessa vez, voc\xea ver\xe1 no console o nome do gato, que definimos como "Nome Legal". Nesse caso, n\xe3o \xe9 obrigat\xf3rio passar o nome e idade do gato, mas se tentarmos rodar o mesmo c\xf3digo, mas com a linha alterada para:'}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",children:"let meuGato = new Gato();\n"})}),"\n",(0,n.jsxs)(a.p,{children:["\u2003O c\xf3digo n\xe3o retornaria um erro, mas chamar o console.log(meuGato.nome) retorna ",(0,n.jsx)(a.em,{children:"undefined"})]}),"\n",(0,n.jsx)(a.h2,{id:"m\xe9todos",children:"M\xe9todos"}),"\n",(0,n.jsx)(a.p,{children:"\u2003Agora, voc\xea talvez queira que seu gato fa\xe7a alguma coisa, j\xe1 que at\xe9 agora ele \xe9 s\xf3... ele. Podemos criar m\xe9todos dentro da classe para definir seus comportamentos. Vamos come\xe7ar criando um m\xe9todo miar."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",children:'class Gato{\n    constructor(nome, idade){\n        this.nome = nome;\n        this.idade = idade;\n        this.patas = 4;\n    }\n    miar(){\n        console.log("Miau")\n    }\n}\nlet meuGato = new Gato("Nome Legal", 3);\n'})}),"\n",(0,n.jsx)(a.p,{children:"\u2003Depois de instanciar o gato, n\xf3s podemos pedir para ele miar da seguinte forma:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",children:'class Gato{\n    constructor(nome, idade){\n        this.nome = nome;\n        this.idade = idade;\n        this.patas = 4;\n    }\n    miar(){\n        console.log("Miau")\n    }\n}\nlet meuGato = new Gato("Nome Legal", 3);\nmeuGato.miar();\n'})}),"\n",(0,n.jsx)(a.p,{children:"\u2003Rodar o c\xf3digo retorna Miau"}),"\n",(0,n.jsx)(a.h2,{id:"heran\xe7a",children:"Heran\xe7a"}),"\n",(0,n.jsx)(a.p,{children:'\u2003Essa classe gato serve para conseguirmos instanciar um gato, mas n\xe3o serve para criar um cachorro, por exemplo. Para isso, seria interessante criar uma classe base, chamada Animal, por exemplo, que ser\xe1 a classe "M\xe3e" do gato e do cachorro. Depois, podemos extender a classe animal nas outras, permitindo assim ter atributos em comum. Segue exemplo:'}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",children:'class Animal{\n    constructor(nome,idade){\n        this.nome = nome;\n        this.idade = idade;\n    }\n}\nclass Gato extends Animal{\n    constructor(nome, idade, vidas){\n        super(nome, idade);\n        this.vidas = vidas;\n    }\n}\nlet meuGato = new Gato("Mingau", 2, 7)\nconsole.log(meuGato.nome)\n'})}),"\n",(0,n.jsx)(a.p,{children:"\u2003Da mesma forma, se tivermos um m\xe9todo na classe m\xe3e, todas as classes que herdam (estendem) dela tamb\xe9m cont\xe9m esse m\xe9todo. Observe:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",children:'class Animal{\n    constructor(nome,idade){\n        this.nome = nome;\n        this.idade = idade;\n    }\n    crescer(){\n        this.idade++;\n        console.log(`${this.nome} cresceu! Agora tem ${this.idade} anos!`)\n    }\n}\nclass Gato extends Animal{\n    constructor(nome, idade, vidas){\n        super(nome, idade);\n        this.vidas = vidas;\n    }\n}\nlet meuGato = new Gato("Mingau", 2, 7);\nconsole.log(meuGato.idade);\nmeuGato.crescer();\n'})}),"\n",(0,n.jsxs)(a.p,{children:["\u2003 Este c\xf3digo retorna o m\xe9todo crescer(), com a idade atualizada do gato mesmo que a classe Gato n\xe3o tenha explicitamente declarado o m\xe9todo. Se quisermos estender essa funcionalidade no gato, com por exemplo falar quantas vidas o gato ainda tem, podemos utilizar o ",(0,n.jsx)(a.em,{children:"super"})," de forma similar ao constructor:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",children:'class Animal{\n    constructor(nome,idade){\n        this.nome = nome;\n        this.idade = idade;\n    }\n    crescer(){\n        this.idade++;\n        console.log(`${this.nome} cresceu! Agora tem ${this.idade} anos!`)\n    }\n}\nclass Gato extends Animal{\n    constructor(nome, idade, vidas){\n        super(nome, idade);\n        this.vidas = vidas;\n    }\n    crescer(){\n        super.crescer();\n        console.log(`E ${this.nome} ainda tem ${this.vidas} vidas`)\n    }\n}\nlet meuGato = new Gato("Mingau", 2, 7);\nconsole.log(meuGato.idade);\nmeuGato.crescer();\n'})}),"\n",(0,n.jsxs)(a.p,{children:["\u2003Caso prefira ignorar o que havia antes naquele m\xe9todo e s\xf3 recriar o m\xe9todo com o mesmo nome da classe m\xe3e, simplesmente n\xe3o utilize o ",(0,n.jsx)(a.em,{children:"super"}),". O m\xe9todo:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",children:"crescer(){\n    console.log(`${this.nome} cresceu! Ele agora tem ${this.idade} anos e ${this.vidas} vidas!`)\n}\n"})}),"\n",(0,n.jsx)(a.p,{children:"\u2003Substituiria completamente o m\xe9todo original"})]})}function m(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,a,s)=>{s.d(a,{R:()=>i,x:()=>t});var o=s(6540);const n={},r=o.createContext(n);function i(e){const a=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(r.Provider,{value:a},e.children)}}}]);